"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import logging
import dj_database_url
import os
from pathlib import Path
from identity.django import Auth
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ROOT_BASE_DIR = os.path.dirname(os.path.dirname(
    os.path.dirname(os.path.abspath(__file__))))

TEMPLATES_DIR = os.path.join(ROOT_BASE_DIR, 'templates')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("APP_ENV", "local") not in ["development", "production"]
ENVIRONMENT = os.getenv("APP_ENV", "local").lower()

ALLOWED_HOSTS = [h for h in os.getenv(
    'DJANGO_ALLOWED_HOSTS', "").split(",") if h]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [o for o in os.getenv(
    "DJANGO_CORS_ALLOWED_ORIGINS", "").split(",") if o]

CSRF_TRUSTED_ORIGINS = [o for o in os.getenv(
    "DJANGO_CSRF_TRUSTED_ORIGINS", "").split(",") if o]

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SECURE = True  # Required for SameSite=None

CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_SAMESITE = "None"
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = False

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

APPEND_SLASH = True

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_USE_TLS = False
EMAIL_USE_SSL = False
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")

if ENVIRONMENT == "production":
    DATABASES = {
        "default": dj_database_url.config(
            default=os.getenv("POSTGRES_DB_URL"),
            conn_max_age=600,
            ssl_require=True
        )
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": os.getenv("POSTGRES_ENGINE"),
            "NAME": os.getenv("POSTGRES_DB"),
            "USER": os.getenv("POSTGRES_USER"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
            "HOST": os.getenv("POSTGRES_HOST"),
            "PORT": os.getenv("POSTGRES_PORT"),
        }
    }


MICROSOFT_AUTH = {
    'TENANT_ID': os.getenv('O365_TENANT_ID'),
    'CLIENT_ID': os.getenv('O365_CLIENT_ID'),
    'CLIENT_SECRET': os.getenv('O365_CLIENT_SECRET'),
    'REDIRECT_URI': os.getenv('O365_REDIRECT_URI'),
    'ISSUER': f"{os.getenv('O365_AUTHORITY')}/v2.0",
    'JWKS_URI': f"{os.getenv('O365_AUTHORITY')}/discovery/v2.0/keys",
    'AUTHORITY': os.getenv('O365_AUTHORITY'),
    'FRONTEND_URL': os.getenv('FRONTEND_URL'),
}

AUTH = Auth(
    os.getenv('O365_CLIENT_ID'),
    client_credential=os.getenv('O365_CLIENT_SECRET'),
    redirect_uri=os.getenv('O365_REDIRECT_URI'),
    authority=os.getenv('O365_AUTHORITY'),
)

# Application definition

INSTALLED_APPS = [
    "accounts.apps.AccountsConfig",
    "pace.apps.PaceConfig",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    "identity",
    "rest_framework",
    'django.contrib.sites',
    # 'dj_rest_auth',
    # 'dj_rest_auth.registration',
    # 'rest_framework.authtoken',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.microsoft',
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'accounts.middleware.CurrentUserMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    ),
}

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR, ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

AUTH_USER_MODEL = 'accounts.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Add SITE_ID for django-allauth
SITE_ID = 1
SOCIALACCOUNT_LOGIN_ON_GET = True
DEFAULT_FROM_EMAIL = 'no-reply@localhost'
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_AUTO_SIGNUP = True
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

LOGIN_URL = 'login'
LOGOUT_URL = 'logout'
LOGIN_REDIRECT_URL = 'http://localhost/oauth/callback'  # frontend callback URL
LOGOUT_REDIRECT_URL = 'http://localhost/'  # frontend home URL

ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_EMAIL_VERIFICATION = 'none'  # or 'optional' / 'mandatory'
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'  # default, but make explicit
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'

# Align django-allauth core flags with signup policy
# Note: dj-rest-auth now prefers SIGNUP_FIELDS for required flags
ACCOUNT_USERNAME_REQUIRED = True   # set to False if you want email-only, no username
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # preferred setting over non-standard ACCOUNT_LOGIN_METHODS

# dj-rest-auth: use SIGNUP_FIELDS instead of deprecated USERNAME_REQUIRED/EMAIL_REQUIRED
# This controls which fields are required during registration.
REST_AUTH = {
    "SIGNUP_FIELDS": {
        "username": {"required": True},
        "email": {"required": True},
        "password1": {"required": True},
        "password2": {"required": True},
    }
}

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Jamaica'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'

# This is where Django copies all static files to (for production serving)
STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')

# These are additional places where static files live (besides app/static/)
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),  # not the same as STATIC_ROOT
# ]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
