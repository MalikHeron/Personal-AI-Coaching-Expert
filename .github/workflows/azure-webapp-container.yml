name: Build and deploy single container to Azure Web App (GHCR)

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      app_name:
        description: "Azure Web App name (fallback if repo variable WEBAPP_NAME is not set)"
        required: false
        type: string

# Set these as GitHub Repository Variables or override here
env:
  WEBAPP_NAME: ${{ vars.WEBAPP_NAME }}             # e.g. pebekac-backend
  WEBAPP_RG: ${{ vars.WEBAPP_RG }}                 # resource group (optional for settings)
  REGISTRY: ghcr.io
  IMAGE_BASENAME: personal-ai-coaching-expert-app  # image repo name in GHCR (monolith)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write     # Required for OIDC login to Azure
      contents: read
      packages: write     # Push image to GHCR

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Resolve Web App name from repo variable or manual dispatch input
      - name: Resolve Web App name
        id: resolve-app-name
        shell: bash
        run: |
          APP="${{ env.WEBAPP_NAME }}"
          if [ -z "$APP" ]; then APP="${{ inputs.app_name }}"; fi
          if [ -z "$APP" ]; then
            echo "::error::Web App name is not set. Set repository variable 'WEBAPP_NAME' (Settings > Secrets and variables > Actions > Variables) or pass 'app_name' when manually dispatching the workflow."
            exit 1
          fi
          echo "Resolved app name: $APP"
          echo "app_name=$APP" >> "$GITHUB_OUTPUT"

      - name: Compute GHCR image name (lowercase owner)
        id: imagename
        shell: bash
        run: |
          OWNER="${GITHUB_REPOSITORY%%/*}"
          OWNER_LC="${OWNER,,}"
          echo "owner_lc=$OWNER_LC" >> "$GITHUB_OUTPUT"
          echo "image=${{ env.REGISTRY }}/${OWNER_LC}/${{ env.IMAGE_BASENAME }}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Add Azure login so webapps-deploy has credentials (OIDC)
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure login (debug)
        run: az account show --output table

      - name: Detect Web App resource group
        id: resolve-rg
        shell: bash
        env:
          WEBAPP_RG: ${{ env.WEBAPP_RG }}
        run: |
          APP_NAME="${{ steps.resolve-app-name.outputs.app_name }}"
          if [ -n "$WEBAPP_RG" ]; then
            echo "Using resource group from WEBAPP_RG variable: $WEBAPP_RG"
            echo "rg=$WEBAPP_RG" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          # Try to discover RG without requiring --resource-group
          RG=$(az resource list --name "$APP_NAME" --resource-type Microsoft.Web/sites --query "[0].resourceGroup" -o tsv || true)
          if [ -n "$RG" ]; then
            echo "Resolved resource group: $RG"
            echo "rg=$RG" >> "$GITHUB_OUTPUT"
          else
            echo "::warning::Could not resolve resource group for app '$APP_NAME'. Set repository variable 'WEBAPP_RG' or create the app first."
          fi

      - name: Configure app settings and GHCR registry credentials (if token provided)
        if: ${{ steps.resolve-rg.outputs.rg != '' || env.WEBAPP_RG != '' }}
        env:
          APP_NAME: ${{ steps.resolve-app-name.outputs.app_name }}
          RG: ${{ steps.resolve-rg.outputs.rg }}
          GITHUB_ACTOR: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
        shell: bash
        run: |
          # Prefer resolved RG; fallback to WEBAPP_RG
          RG_INPUT="${RG}"
          if [ -z "$RG_INPUT" ]; then RG_INPUT="${{ env.WEBAPP_RG }}"; fi
          if [ -z "$RG_INPUT" ]; then
            echo "::warning::No resource group available; skipping app settings step."
            exit 0
          fi
          # Basic app settings (port and flags for Linux container)
          az webapp config appsettings set \
            --resource-group "$RG_INPUT" \
            --name "$APP_NAME" \
            --settings \
              WEBSITES_PORT=80 \
              DOCKER_ENABLE_CI=true \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE=false

          # Registry credentials for GHCR (only if token provided; otherwise assume public package)
          if [ -n "$GHCR_TOKEN" ]; then
            # Prefer an explicit GHCR_USERNAME secret when provided; fall back to the workflow actor
            USERNAME="${GHCR_USERNAME:-$GITHUB_ACTOR}"
            echo "Configuring GHCR credentials for user: $USERNAME"
            az webapp config appsettings set \
              --resource-group "$RG_INPUT" \
              --name "$APP_NAME" \
              --settings \
                DOCKER_REGISTRY_SERVER_URL='https://ghcr.io' \
                DOCKER_REGISTRY_SERVER_USERNAME="$USERNAME" \
                DOCKER_REGISTRY_SERVER_PASSWORD="$GHCR_TOKEN"
          else
            echo "No GHCR_TOKEN provided; ensure your GHCR package is PUBLIC or set GHCR_TOKEN (PAT with read:packages). Optionally set GHCR_USERNAME to match the PAT owner."
          fi

      - name: Build and push monolith image to GHCR (root Dockerfile)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.imagename.outputs.image }}:${{ github.sha }}
            ${{ steps.imagename.outputs.image }}:latest

      - name: Deploy to Azure Web App (container) via OIDC
        id: deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.resolve-app-name.outputs.app_name }}
          images: ${{ steps.imagename.outputs.image }}:${{ github.sha }}

  # Optional: Configure app settings (port, env) and GHCR credentials if image is private
  # - name: Configure app settings
  #   if: env.WEBAPP_RG != ''
  #   run: |
  #     az webapp config appsettings set \
  #       --resource-group "${WEBAPP_RG}" \
  #       --name "${WEBAPP_NAME}" \
  #       --settings \
  #         WEBSITES_PORT=80 \
  #         APP_ENV=production \
  #         DOCKER_ENABLE_CI=true \
  #         WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
  #         DJANGO_REDIS_URL='${{ secrets.DJANGO_REDIS_URL }}' \
  #         POSTGRES_DB='${{ secrets.POSTGRES_DB }}' \
  #         POSTGRES_USER='${{ secrets.POSTGRES_USER }}' \
  #         POSTGRES_PASSWORD='${{ secrets.POSTGRES_PASSWORD }}' \
  #         POSTGRES_HOST='${{ secrets.POSTGRES_HOST }}' \
  #         POSTGRES_PORT='${{ secrets.POSTGRES_PORT }}' \
  #         POSTGRES_DB_URL='${{ secrets.POSTGRES_DB_URL }}'

  # Optional: Only needed if using PRIVATE GHCR image (provide GHCR_USERNAME and GHCR_TOKEN as secrets)
  # - name: Configure GHCR registry credentials for Web App
  #   if: env.WEBAPP_RG != ''
  #   run: |
  #     az webapp config appsettings set \
  #       --resource-group "${WEBAPP_RG}" \
  #       --name "${WEBAPP_NAME}" \
  #       --settings \
  #         DOCKER_REGISTRY_SERVER_URL='https://ghcr.io' \
  #         DOCKER_REGISTRY_SERVER_USERNAME='${{ secrets.GHCR_USERNAME }}' \
  #         DOCKER_REGISTRY_SERVER_PASSWORD='${{ secrets.GHCR_TOKEN }}'

      - name: Output Web App URL
        run: |
          echo "App URL: https://${{ steps.resolve-app-name.outputs.app_name }}.azurewebsites.net"
